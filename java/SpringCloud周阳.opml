<?xml version="1.0" encoding="UTF-8" standalone="no"?><opml version="2.0"><head><title>SpringCloud第一季
讲师:尚硅谷周阳</title><owername>admin</owername><producer>XMind</producer><xmind-version>3.7.8</xmind-version></head><body><outline text="SpringCloud第一季&#10;讲师:尚硅谷周阳"><outline text="微服务概述与SpringCloud"><outline text="微服务与微服务架构"><outline text="业界大牛马丁.福勒（Martin Fowler） 这样描述微服务：&lt;br&gt;论文网址：            https://martinfowler.com/articles/microservices.html&lt;br&gt; &lt;br&gt;  &lt;br&gt;微服务&lt;br&gt;强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用,&lt;br&gt;狭意的看,可以看作Eclipse里面的一个个微服务工程/或者Module&lt;br&gt;  &lt;br&gt; &lt;br&gt; ..." type="note"/><outline text="技术维度理解"><outline text="微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底&#10;地去耦合,每一个微服务提供单个业务功能的服务，一个服务做一件事，&#10;从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动&#10;或销毁，拥有自己独立的数据库。"/></outline></outline><outline text="微服务技术栈有哪些"><outline text="微服务条目    落地技术    备注&lt;br&gt;服务开发    Springboot、Spring、SpringMVC    &lt;br&gt;服务配置与管理    Netflix公司的Archaius、阿里的Diamond等    &lt;br&gt;服务注册与发现    Eureka、Consul、Zookeeper等    &lt;br&gt;服务调用    Rest、RPC、gRPC    &lt;br&gt;服务熔断器    Hystrix、Envoy等    &lt;br&gt;负载均衡    Ribbon、Nginx等    &lt;br&gt;服务接口调用(客户端调用服务的简化工具)    Feign等    &lt;br&gt;消息队列    Kafka、RabbitMQ、ActiveMQ等    &lt;br&gt;服务配置中心管理    SpringCloudConfig、Chef等    ..." type="note"/></outline><outline text="SpringCloud是什么"><outline text="官网说明"><outline text="SpringCloud，基于SpringBoot提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。&lt;br&gt; &lt;br&gt;SpringCloud利用SpringBoot的开发便利性巧妙地简化了分布式系统基础设施的开发，SpringCloud为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等,它们都可以用SpringBoot的开发风格做到一键启动和部署。&lt;br&gt; &lt;br&gt;SpringBoot并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过SpringBoot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包" type="note"/></outline><outline text="SpringCloud=分布式微服务架构下的一站式解决方案，&#10;是各个微服务架构落地技术的集合体，俗称微服务全家桶"><outline text="All"><outline text="" type="note"/></outline></outline><outline text="SpringCloud和SpringBoot是什么关系"><outline text="SpringBoot专注于快速方便的开发单个个体微服务。&lt;br&gt; &lt;br&gt;SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，&lt;br&gt;为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务&lt;br&gt; &lt;br&gt;SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖的关系.&lt;br&gt; &lt;br&gt;SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。" type="note"/></outline><outline text="Dubbo是怎么到SpringCloud的？&#10;哪些优缺点让你去技术选型"><outline text="目前成熟的互联网架构（分布式+服务治理Dubbo）"><outline text="" type="note"/></outline><outline text="我们把SpringCloud VS DUBBO进行一番对比"><outline text=" 最大区别：SpringCloud抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式。&lt;br&gt;严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更加合适。&lt;br&gt; &lt;br&gt;品牌机与组装机的区别&lt;br&gt;很明显，Spring Cloud的功能比DUBBO更加强大，涵盖面更广，而且作为Spring的拳头项目，它也能够与Spring Framework、Spring Boot、Spring Data、Spring Batch等其他Spring项目完美融合，这些对于微服务而言是至关重要的。使用Dubbo构建的微服务架构就像组装电脑，各环节我们的选择自由度很高，但是最终结果很有可能因为一条内存质量不行就点不亮了，总是让人不怎么放心，但是如果你是一名高手，那这些都不是问题；而Spring Cloud就像品牌机，在Spring Source的整合下，做了大量的兼容性测试，保证了机器拥有更高的稳定性，但是如果要在使用非原装组件外的东西，就需要对其基础有足够的了解。..." type="note"/></outline><outline text="总结Cloud与Dubbo"><outline text="问题：&lt;br&gt;曾风靡国内的开源 RPC 服务框架 Dubbo 在重启维护后，令许多用户为之雀跃，但同时，也迎来了一些质疑的声音。互联网技术发展迅速，Dubbo 是否还能跟上时代？Dubbo 与 Spring Cloud 相比又有何优势和差异？是否会有相关举措保证 Dubbo 的后续更新频率？&lt;br&gt; &lt;br&gt;人物：Dubbo重启维护开发的刘军，主要负责人之一&lt;br&gt; &lt;br&gt;刘军，阿里巴巴中间件高级研发工程师，主导了 Dubbo 重启维护以后的几个发版计划，专注于高性能 RPC 框架和微服务相关领域。曾负责网易考拉 RPC 框架的研发及指导在内部使用，参与了服务治理平台、分布式跟踪系统、分布式一致性框架等从无到有的设计与开发过程。" type="note"/></outline></outline></outline><outline text="参考资料"><outline text="官网"><outline text="http://projects.spring.io/spring-cloud/"/></outline><outline text="参考书"><outline text="https://springcloud.cc/spring-cloud-netflix.html"/><outline text="本次开发API说明"><outline text="http://cloud.spring.io/spring-cloud-static/Dalston.SR1/"/><outline text="https://springcloud.cc/spring-cloud-dalston.html"/></outline><outline text="springcloud中国社区"><outline text="http://springcloud.cn/"/></outline><outline text="springcloud中文网"><outline text="https://springcloud.cc/"/></outline></outline></outline><outline text="SpringCloud国内使用情况"><outline text="国内公司"><outline text=""/></outline><outline text="阿里云"><outline text=""/></outline></outline></outline><outline text="Rest微服务构建&#10;案例工程模块"><outline text="总体介绍"><outline text="承接着我们的springmvc+mybatis+mysql初级高级课程，以Dept部门模块做一个微服务通用案例&#10;Consumer消费者（Client）通过REST调用Provider提供者（Server）提供的服务"/><outline text="Maven的分包分模块架构复习"><outline text="一个简单的Maven模块结构是这样的：&lt;br&gt;---- app-parent      一个父项目(app-parent)聚合很多子项目(app-util,app-dao,app-service,app-web)&lt;br&gt;      |---- pom.xml (pom)&lt;br&gt;      |&lt;br&gt;      |-------- app-util&lt;br&gt;      | |-------- pom.xml (jar)&lt;br&gt;      |&lt;br&gt;      |-------- app-dao&lt;br&gt;      | |-------- pom.xml (jar)..." type="note"/><outline text="一个Project带着多个Module子模块"/><outline text="MicroServiceCloud父工程（Project）下初次带着3个子模块（Module）"><outline text="microservicecloud-api"><outline text="封装的整体Entity/接口/公共配置等"/></outline><outline text="microservicecloud-provider-dept-8001"><outline text="微服务落地的服务提供者"/></outline><outline text="microservicecloud-consumer-dept-80"><outline text="微服务调用的客户端使用"/><outline text="80端口"><outline text="80端口是为HTTP(HyperText Transport Protocol)即超文本传输协议开放的&lt;br&gt;此为上网冲浪使用次数最多的协议，主要用于WWW(World Wide Web)即万维网传输信息的协议。&lt;br&gt; &lt;br&gt;可以通过HTTP地址(即常说的&quot;网址&quot;)加&quot;:80&quot;来访问网站，&lt;br&gt;&lt;br&gt;因为浏览网页服务默认的端口号都是80，因此只需输入网址即可，不用输入&quot;:80&quot;了。" type="note"/></outline></outline></outline></outline><outline text="直接动手干"><outline text=""/></outline></outline><outline text="本次springCloud版本"><outline text="" type="note"/></outline><outline text="构建步骤"><outline text="microservicecloud&#10;整体父工程Project"><outline text="新建父工程microservicecloud，切记是Packageing是pom模式"><outline text="" type="note"/></outline><outline text="主要是定义POM文件，将后续各个子模块公用的jar包等统一提出来，类似一个抽象父类"/><outline text="POM"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;    &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;    &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;    &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;&lt;br&gt;    &lt;&lt;packaging&gt;pom&lt;&lt;/packaging&gt;..." type="note"/></outline></outline><outline text="microservicecloud-api&#10;公共子模块Module"><outline text="新建microservicecloud-api"><outline text="" type="note"/><outline text="创建完成后请回到父工程查看pom文件变化"/></outline><outline text="修改POM"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;    &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;parent&gt;&lt;&lt;!-- 子类里面显示声明才能有明确的继承表现，无意外就是父类的默认版本否则自己定义 --&gt;&lt;br&gt;        &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;        &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline><outline text="新建部门Entity且配合lombok使用"><outline text="package com.atguigu.springcloud.entities;&lt;br&gt; &lt;br&gt;import java.io.Serializable;&lt;br&gt; &lt;br&gt;import lombok.Data;&lt;br&gt;import lombok.NoArgsConstructor;&lt;br&gt;import lombok.experimental.Accessors;&lt;br&gt; &lt;br&gt;@SuppressWarnings(&quot;serial&quot;)&lt;br&gt;@NoArgsConstructor..." type="note"/></outline><outline text="mvn clean install后给其它模块引用，达到通用目的。&#10;也即需要用到部门实体的话，不用每个工程都定义一份，直接引用本模块即可。"/></outline><outline text="microservicecloud-provider-dept-8001  部门微服务提供者Module"><outline text="新建microservicecloud-provider-dept-8001"><outline text="" type="note"/><outline text="创建完成后请回到父工程查看pom文件变化"/></outline><outline text="POM"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;    &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;parent&gt;&lt;br&gt;        &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;        &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline><outline text="YML"><outline text="server:&lt;br&gt;  port: 8001&lt;br&gt;  &lt;br&gt;mybatis:&lt;br&gt;  config-location: classpath:mybatis/mybatis.cfg.xml        # mybatis配置文件所在路径&lt;br&gt;  type-aliases-package: com.atguigu.springcloud.entities    # 所有Entity别名类所在包&lt;br&gt;  mapper-locations:&lt;br&gt;  - classpath:mybatis/mapper/**/*.xml                       # mapper映射文件&lt;br&gt;    &lt;br&gt;spring:..." type="note"/></outline><outline text="工程src/main/resources目录下新建mybatis文件夹后新建mybatis.cfg.xml文件"><outline text="&lt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;br&gt;&lt;&lt;!DOCTYPE configuration&lt;br&gt;  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&lt;br&gt;  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;br&gt;  &lt;br&gt;&lt;&lt;configuration&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;settings&gt;&lt;br&gt;        &lt;&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;&lt;&lt;!-- 二级缓存开启 --&gt;&lt;br&gt;    &lt;&lt;/settings&gt;..." type="note"/></outline><outline text="MySQL创建部门数据库脚本"><outline text="DROP DATABASE IF EXISTS cloudDB01;&lt;br&gt;CREATE DATABASE cloudDB01 CHARACTER SET UTF8;&lt;br&gt;USE cloudDB01;&lt;br&gt;CREATE TABLE dept&lt;br&gt;(&lt;br&gt;  deptno BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,&lt;br&gt;  dname VARCHAR(60),&lt;br&gt;  db_source   VARCHAR(60)&lt;br&gt;);&lt;br&gt; ..." type="note"/></outline><outline text="DeptDao部门接口"><outline text="package com.atguigu.springcloud.dao;&lt;br&gt;&lt;br&gt;import java.util.List;&lt;br&gt;import org.apache.ibatis.annotations.Mapper;&lt;br&gt;import com.atguigu.springcloud.entities.Dept;&lt;br&gt;&lt;br&gt;@Mapper&lt;br&gt;public interface DeptDao&lt;br&gt;{&lt;br&gt;    public boolean addDept(Dept dept);..." type="note"/></outline><outline text="工程src/main/resources/mybatis目录下新建mapper文件夹后再建DeptMapper.xml"><outline text="&lt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;br&gt;&lt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;&lt;br&gt;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;br&gt; &lt;br&gt;&lt;&lt;mapper namespace=&quot;com.atguigu.springcloud.dao.DeptDao&quot;&gt;&lt;br&gt; &lt;br&gt;  &lt;&lt;select id=&quot;findById&quot; resultType=&quot;Dept&quot; parameterType=&quot;Long&quot;&gt;&lt;br&gt;   select deptno,dname,db_source from dept where deptno=#{deptno}; &lt;br&gt;  &lt;&lt;/select&gt;&lt;br&gt;  &lt;&lt;select id=&quot;findAll&quot; resultType=&quot;Dept&quot;&gt;..." type="note"/></outline><outline text="DeptService部门服务接口"><outline text="package com.atguigu.springcloud.service;&lt;br&gt;&lt;br&gt;import java.util.List;&lt;br&gt;&lt;br&gt;import com.atguigu.springcloud.entities.Dept;&lt;br&gt;&lt;br&gt;public interface DeptService&lt;br&gt;{&lt;br&gt;    public boolean add(Dept dept);&lt;br&gt;    public Dept    get(Long id);..." type="note"/></outline><outline text="DeptServiceImpl部门服务接口实现类"><outline text="package com.atguigu.springcloud.service.impl;&lt;br&gt;&lt;br&gt;import java.util.List;&lt;br&gt;&lt;br&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br&gt;import org.springframework.stereotype.Service;&lt;br&gt;&lt;br&gt;import com.atguigu.springcloud.dao.DeptDao;&lt;br&gt;import com.atguigu.springcloud.entities.Dept;&lt;br&gt;import com.atguigu.springcloud.service.DeptService;..." type="note"/></outline><outline text="DeptController部门微服务提供者REST"><outline text="package com.atguigu.springcloud.controller;&lt;br&gt;&lt;br&gt;import java.util.List;&lt;br&gt;&lt;br&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br&gt;import org.springframework.web.bind.annotation.PathVariable;&lt;br&gt;import org.springframework.web.bind.annotation.RequestBody;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMethod;&lt;br&gt;import org.springframework.web.bind.annotation.RestController;..." type="note"/></outline><outline text="DeptProvider8001_App主启动类DeptProvider8001_App"><outline text="package com.atguigu.springcloud;&lt;br&gt;&lt;br&gt;import org.springframework.boot.SpringApplication;&lt;br&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;&lt;br&gt;&lt;br&gt;@SpringBootApplication&lt;br&gt;public class DeptProvider8001_App&lt;br&gt;{&lt;br&gt;    public static void main(String[] args)&lt;br&gt;    {..." type="note"/></outline><outline text="测试"><outline text="http://localhost:8001/dept/get/2"/><outline text="http://localhost:8001/dept/list"/></outline><outline text="最终工程展现"><outline text="" type="note"/></outline></outline><outline text="microservicecloud-consumer-dept-80&#10;部门微服务消费者Module"><outline text="新建microservicecloud-consumer-dept-80"/><outline text="POM"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;    &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;parent&gt;&lt;br&gt;        &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;        &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline><outline text="YML"><outline text="server:&lt;br&gt;  port: 80" type="note"/></outline><outline text="com.atguigu.springcloud.cfgbeans包下ConfigBean的编写（类似spring里面的applicationContext.xml写入的注入Bean）"><outline text="package com.atguigu.springcloud.cfgbeans;&lt;br&gt; &lt;br&gt;import org.springframework.context.annotation.Bean;&lt;br&gt;import org.springframework.context.annotation.Configuration;&lt;br&gt;import org.springframework.web.client.RestTemplate;&lt;br&gt; &lt;br&gt;@Configuration&lt;br&gt;public class ConfigBean&lt;br&gt;{&lt;br&gt;    @Bean..." type="note"/></outline><outline text="com.atguigu.springcloud.controller包下新建DeptController_Consumer部门微服务消费者REST"><outline text="RestTemplate"><outline text="是什么"><outline text="RestTemplate提供了多种便捷访问远程Http服务的方法， &lt;br&gt;是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集" type="note"/></outline><outline text="官网及使用"><outline text="官网地址&lt;br&gt; &lt;br&gt;https://docs.spring.io/spring-framework/docs/4.3.7.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html&lt;br&gt; &lt;br&gt; &lt;br&gt;使用&lt;br&gt;使用restTemplate访问restful接口非常的简单粗暴无脑。&lt;br&gt;(url, requestMap, ResponseBean.class)这三个参数分别代表 &lt;br&gt;REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。" type="note"/></outline></outline><outline text="代码"><outline text="package com.atguigu.springcloud.controller;&lt;br&gt; &lt;br&gt;import java.util.List;&lt;br&gt; &lt;br&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br&gt;import org.springframework.web.bind.annotation.PathVariable;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br&gt;import org.springframework.web.bind.annotation.RestController;&lt;br&gt;import org.springframework.web.client.RestTemplate;&lt;br&gt; ..." type="note"/></outline></outline><outline text="DeptConsumer80_App主启动类"><outline text="package com.atguigu.springcloud;&lt;br&gt; &lt;br&gt;import org.springframework.boot.SpringApplication;&lt;br&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;&lt;br&gt;&lt;br&gt; &lt;br&gt;@SpringBootApplication&lt;br&gt;public class DeptConsumer80_App&lt;br&gt;{&lt;br&gt;  public static void main(String[] args)..." type="note"/></outline><outline text="测试"><outline text="http://localhost/consumer/dept/get/2"/><outline text="http://localhost/consumer/dept/list"/><outline text="http://localhost/consumer/dept/add?dname=AI"/></outline></outline></outline></outline><outline text="Eureka服务注册与发现"><outline text="是什么"><outline text="Eureka是什么&lt;br&gt; &lt;br&gt;Eureka是Netflix的一个子模块，也是核心模块之一。Eureka是一个基于REST的服务，用于定位服务，以实现云端中间层服务发现和故障转移。&lt;br&gt;&lt;br&gt;服务注册与发现对于微服务架构来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了。功能类似于dubbo的注册中心，比如Zookeeper。" type="note"/><outline text=""/></outline><outline text="原理讲解"><outline text="Eureka的基本架构"><outline text="Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务注册和发现(请对比Zookeeper)。&lt;br&gt; &lt;br&gt;Eureka 采用了 C-S 的设计架构。Eureka Server 作为服务注册功能的服务器，它是服务注册中心。&lt;br&gt; &lt;br&gt;而系统中的其他微服务，使用 Eureka 的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。SpringCloud 的一些其他模块（比如Zuul）就可以通过 Eureka Server 来发现系统中的其他微服务，并执行相关的逻辑。&lt;br&gt;请注意和Dubbo的架构对比&lt;br&gt;&lt;br&gt; ..." type="note"/></outline><outline text="三大角色"><outline text="Eureka Server 提供服务注册和发现"/><outline text="Service Provider服务提供方将自身服务注册到Eureka，从而使服务消费方能够找到"/><outline text="Service Consumer服务消费方从Eureka获取注册服务列表，从而能够消费服务"/></outline></outline><outline text="构建步骤"><outline text="microservicecloud-eureka-7001&#10;eureka服务注册中心Module"><outline text="新建microservicecloud-eureka-7001"/><outline text="POM"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;    &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;parent&gt;&lt;br&gt;        &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;        &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline><outline text="YML"><outline text="server: &lt;br&gt;  port: 7001&lt;br&gt; &lt;br&gt;eureka:&lt;br&gt;  instance:&lt;br&gt;    hostname: localhost #eureka服务端的实例名称&lt;br&gt;  client:&lt;br&gt;    register-with-eureka: false #false表示不向注册中心注册自己。&lt;br&gt;    fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务&lt;br&gt;    service-url:..." type="note"/></outline><outline text="EurekaServer7001_App主启动类"><outline text="package com.atguigu.springcloud;&lt;br&gt; &lt;br&gt;import org.springframework.boot.SpringApplication;&lt;br&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;&lt;br&gt;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;&lt;br&gt; &lt;br&gt;@SpringBootApplication&lt;br&gt;@EnableEurekaServer//EurekaServer服务器端启动类,接受其它微服务注册进来&lt;br&gt;public class EurekaServer7001_App&lt;br&gt;{..." type="note"/><outline text="@EnableEurekaServer"/></outline><outline text="测试"><outline text="http://localhost:7001/"/><outline text="结果页面"><outline text="" type="note"/><outline text="No application available 没有服务被发现 O(∩_∩)O&#10;因为没有注册服务进来当然不可能有服务被发现"/></outline></outline></outline><outline text="microservicecloud-provider-dept-8001&#10;将已有的部门微服务注册进eureka服务中心"><outline text="修改microservicecloud-provider-dept-8001"/><outline text="POM"><outline text="修改部分"><outline text="        &lt;&lt;!-- 将微服务provider侧注册进eureka --&gt;&lt;br&gt;        &lt;&lt;dependency&gt;&lt;br&gt;            &lt;&lt;groupId&gt;org.springframework.cloud&lt;&lt;/groupId&gt;&lt;br&gt;            &lt;&lt;artifactId&gt;spring-cloud-starter-eureka&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;/dependency&gt;&lt;br&gt;        &lt;&lt;dependency&gt;&lt;br&gt;            &lt;&lt;groupId&gt;org.springframework.cloud&lt;&lt;/groupId&gt;&lt;br&gt;            &lt;&lt;artifactId&gt;spring-cloud-starter-config&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;/dependency&gt;" type="note"/></outline><outline text="完整内容"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;    &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;parent&gt;&lt;br&gt;        &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;        &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline></outline><outline text="YML"><outline text="修改部分"><outline text="eureka:&lt;br&gt;  client: #客户端注册进eureka服务列表内&lt;br&gt;    service-url: &lt;br&gt;      defaultZone: http://localhost:7001/eureka" type="note"/></outline><outline text="完整内容"><outline text="server:&lt;br&gt;  port: 8001&lt;br&gt;  &lt;br&gt;mybatis:&lt;br&gt;  config-location: classpath:mybatis/mybatis.cfg.xml        # mybatis配置文件所在路径&lt;br&gt;  type-aliases-package: com.atguigu.springcloud.entities    # 所有Entity别名类所在包&lt;br&gt;  mapper-locations:&lt;br&gt;  - classpath:mybatis/mapper/**/*.xml                       # mapper映射文件&lt;br&gt;    &lt;br&gt;spring:..." type="note"/></outline></outline><outline text="DeptProvider8001_App主启动类"><outline text="package com.atguigu.springcloud;&lt;br&gt; &lt;br&gt;import org.springframework.boot.SpringApplication;&lt;br&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;&lt;br&gt;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;&lt;br&gt; &lt;br&gt;@SpringBootApplication&lt;br&gt;@EnableEurekaClient //本服务启动后会自动注册进eureka服务中&lt;br&gt;public class DeptProvider8001_App&lt;br&gt;{..." type="note"/><outline text="@EnableEurekaClient"/></outline><outline text="测试"><outline text="先要启动EurekaServer"/><outline text="http://localhost:7001/"><outline text="" type="note"/></outline><outline text="微服务注册名配置说明"><outline text="" type="note"/></outline></outline></outline><outline text="actuator与注册微服务信息完善"><outline text="主机名称:服务名称修改"><outline text="当前问题"><outline text="含有主机名称" type="note"/></outline><outline text="修改microservicecloud-provider-dept-8001"><outline text="YML"><outline text="修改部分"><outline text="eureka:&lt;br&gt;  client: #客户端注册进eureka服务列表内&lt;br&gt;    service-url: &lt;br&gt;      defaultZone: http://localhost:7001/eureka&lt;br&gt;  instance:&lt;br&gt;    instance-id: microservicecloud-dept8001" type="note"/></outline><outline text="完整内容"><outline text="server:&lt;br&gt;  port: 8001&lt;br&gt;  &lt;br&gt;mybatis:&lt;br&gt;  config-location: classpath:mybatis/mybatis.cfg.xml  #mybatis所在路径&lt;br&gt;  type-aliases-package: com.atguigu.springcloud.entities #entity别名类&lt;br&gt;  mapper-locations:&lt;br&gt;  - classpath:mybatis/mapper/**/*.xml #mapper映射文件&lt;br&gt;    &lt;br&gt;spring:..." type="note"/></outline></outline></outline><outline text="修改之后"><outline text="" type="note"/></outline></outline><outline text="访问信息有IP信息提示"><outline text="当前问题"><outline text="没有IP提示"/></outline><outline text="修改microservicecloud-provider-dept-8001"><outline text="YML"><outline text="修改部分"><outline text="eureka:&lt;br&gt;  client: #客户端注册进eureka服务列表内&lt;br&gt;    service-url: &lt;br&gt;      defaultZone: http://localhost:7001/eureka&lt;br&gt;  instance:&lt;br&gt;    instance-id: microservicecloud-dept8001   #自定义服务名称信息&lt;br&gt;    prefer-ip-address: true     #访问路径可以显示IP地址" type="note"/></outline><outline text="完整内容"><outline text="server:&lt;br&gt;  port: 8001&lt;br&gt;  &lt;br&gt;mybatis:&lt;br&gt;  config-location: classpath:mybatis/mybatis.cfg.xml  #mybatis所在路径&lt;br&gt;  type-aliases-package: com.atguigu.springcloud.entities #entity别名类&lt;br&gt;  mapper-locations:&lt;br&gt;  - classpath:mybatis/mapper/**/*.xml #mapper映射文件&lt;br&gt;    &lt;br&gt;spring:..." type="note"/></outline></outline></outline><outline text="修改之后"><outline text="" type="note"/></outline></outline><outline text="微服务info内容详细信息"><outline text="当前问题"><outline text="超链接点击服务报告ErrorPage"/></outline><outline text="修改microservicecloud-provider-dept-8001"><outline text="POM"><outline text="修改部分"><outline text="&lt;&lt;dependency&gt;&lt;br&gt;       &lt;&lt;groupId&gt;org.springframework.boot&lt;&lt;/groupId&gt;&lt;br&gt;       &lt;&lt;artifactId&gt;spring-boot-starter-actuator&lt;&lt;/artifactId&gt;&lt;br&gt;   &lt;&lt;/dependency&gt;" type="note"/></outline><outline text="完整内容"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;    &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;parent&gt;&lt;br&gt;        &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;        &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline></outline></outline><outline text="总的父工程microservicecloud修改pom.xml添加构建build信息"><outline text="POM"><outline text="修改部分"><outline text="&lt;&lt;build&gt;&lt;br&gt;        &lt;&lt;finalName&gt;microservicecloud&lt;&lt;/finalName&gt;&lt;br&gt;        &lt;&lt;resources&gt;&lt;br&gt;            &lt;&lt;resource&gt;&lt;br&gt;                &lt;&lt;directory&gt;src/main/resources&lt;&lt;/directory&gt;&lt;br&gt;                &lt;&lt;filtering&gt;true&lt;&lt;/filtering&gt;&lt;br&gt;            &lt;&lt;/resource&gt;&lt;br&gt;        &lt;&lt;/resources&gt;&lt;br&gt;        &lt;&lt;plugins&gt;&lt;br&gt;            &lt;&lt;plugin&gt;..." type="note"/></outline><outline text="完整内容"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;    &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;    &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;    &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;&lt;br&gt;    &lt;&lt;packaging&gt;pom&lt;&lt;/packaging&gt;..." type="note"/></outline></outline></outline><outline text="修改microservicecloud-provider-dept-8001"><outline text="YML"><outline text="修改部分"><outline text="info:&lt;br&gt;  app.name: atguigu-microservicecloud&lt;br&gt;  company.name: www.atguigu.com&lt;br&gt;  build.artifactId: $project.artifactId$&lt;br&gt;  build.version: $project.version$" type="note"/></outline><outline text="完整内容"><outline text="server:&lt;br&gt;  port: 8001&lt;br&gt;  &lt;br&gt;mybatis:&lt;br&gt;  config-location: classpath:mybatis/mybatis.cfg.xml  #mybatis所在路径&lt;br&gt;  type-aliases-package: com.atguigu.springcloud.entities #entity别名类&lt;br&gt;  mapper-locations:&lt;br&gt;  - classpath:mybatis/mapper/**/*.xml #mapper映射文件&lt;br&gt;    &lt;br&gt;spring:..." type="note"/></outline></outline></outline></outline></outline><outline text="eureka自我保护"><outline text="演示Case"/><outline text="故障现象"><outline text=""/><outline text=""/></outline><outline text="导致原因"><outline text="什么是自我保护模式？&lt;br&gt;  &lt;br&gt;默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，EurekaServer就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。&lt;br&gt; &lt;br&gt;在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。一句话讲解：好死不如赖活着..." type="note"/><outline text="一句话：某时刻某一个微服务不可用了，eureka不会立刻清理，依旧会对该微服务的信息进行保存"/></outline></outline></outline><outline text="集群配置"><outline text="原理说明"/><outline text="新建microservicecloud-eureka-7002/microservicecloud-eureka-7003"/><outline text="按照7001为模板粘贴POM"/><outline text="修改7002和7003的主启动类"/><outline text="修改映射配置"><outline text="找到C:\Windows\System32\drivers\etc路径下的hosts文件"><outline text=""/></outline><outline text="修改映射配置添加进hosts文件"><outline text="127.0.0.1  eureka7001.com"/><outline text="127.0.0.1  eureka7002.com"/><outline text="127.0.0.1  eureka7003.com"/></outline></outline><outline text="3台eureka服务器的yml配置"><outline text="7001"><outline text="server: &lt;br&gt;  port: 7001&lt;br&gt; &lt;br&gt;eureka: &lt;br&gt;  instance:&lt;br&gt;    hostname: eureka7001.com #eureka服务端的实例名称&lt;br&gt;  client: &lt;br&gt;    register-with-eureka: false     #false表示不向注册中心注册自己。&lt;br&gt;    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务&lt;br&gt;    service-url: ..." type="note"/></outline><outline text="7002"><outline text="server: &lt;br&gt;  port: 7002&lt;br&gt;&lt;br&gt;eureka: &lt;br&gt;  instance:&lt;br&gt;    hostname: eureka7002.com #eureka服务端的实例名称&lt;br&gt;  client: &lt;br&gt;    register-with-eureka: false     #false表示不向注册中心注册自己。&lt;br&gt;    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务&lt;br&gt;    service-url: ..." type="note"/></outline><outline text="7003"><outline text="server: &lt;br&gt;  port: 7003&lt;br&gt;&lt;br&gt;eureka: &lt;br&gt;  instance:&lt;br&gt;    hostname: eureka7003.com #eureka服务端的实例名称&lt;br&gt;  client: &lt;br&gt;    register-with-eureka: false     #false表示不向注册中心注册自己。&lt;br&gt;    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务&lt;br&gt;    service-url: ..." type="note"/></outline></outline><outline text="microservicecloud-provider-dept-8001&#10;微服务发布到上面3台eureka集群配置中"><outline text="YML"><outline text="server:&lt;br&gt;  port: 8001&lt;br&gt;  &lt;br&gt;mybatis:&lt;br&gt;  config-location: classpath:mybatis/mybatis.cfg.xml  #mybatis所在路径&lt;br&gt;  type-aliases-package: com.atguigu.springcloud.entities #entity别名类&lt;br&gt;  mapper-locations:&lt;br&gt;  - classpath:mybatis/mapper/**/*.xml #mapper映射文件&lt;br&gt;    &lt;br&gt;spring:..." type="note"/></outline></outline></outline></outline><outline text="Ribbon负载均衡"><outline text="概述"><outline text="是什么"><outline text="Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端       负载均衡的工具。&lt;br&gt; &lt;br&gt;简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。" type="note"/><outline text=""/></outline><outline text="能干吗"><outline text="LB（负载均衡）"><outline text="LB，即负载均衡(Load Balance)，在微服务或分布式集群中经常用的一种应用。&lt;br&gt;负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA。&lt;br&gt;常见的负载均衡有软件Nginx，LVS，硬件 F5等。&lt;br&gt;相应的在中间件，例如：dubbo和SpringCloud中均给我们提供了负载均衡，SpringCloud的负载均衡算法可以自定义。" type="note"/><outline text="集中式LB"><outline text="集中式LB&lt;br&gt;&lt;br&gt;即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方；" type="note"/></outline><outline text="进程内LB"><outline text="进程内LB&lt;br&gt; &lt;br&gt;将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。&lt;br&gt;&lt;br&gt;Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。" type="note"/></outline></outline></outline><outline text="官网资料"><outline text="https://github.com/Netflix/ribbon/wiki/Getting-Started"/></outline></outline><outline text="Ribbon配置初步"><outline text="修改microservicecloud-consumer-dept-80工程"/><outline text="修改pom.xml文件"><outline text="内容"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;  &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt; &lt;br&gt;  &lt;&lt;parent&gt;&lt;br&gt;   &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;   &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;   &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline></outline><outline text="修改application.yml   追加eureka的服务注册地址"><outline text="内容"><outline text="server:&lt;br&gt;  port: 80&lt;br&gt;&lt;br&gt;eureka:&lt;br&gt;  client:&lt;br&gt;    register-with-eureka: false&lt;br&gt;    service-url: &lt;br&gt;      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/" type="note"/></outline></outline><outline text="对ConfigBean进行新注解@LoadBalanced    获得Rest时加入Ribbon的配置"><outline text="package com.atguigu.springcloud.cfgbeans;&lt;br&gt; &lt;br&gt;import org.springframework.cloud.client.loadbalancer.LoadBalanced;&lt;br&gt;import org.springframework.context.annotation.Bean;&lt;br&gt;import org.springframework.context.annotation.Configuration;&lt;br&gt;import org.springframework.web.client.RestTemplate;&lt;br&gt; &lt;br&gt;@Configuration&lt;br&gt;public class ConfigBean&lt;br&gt;{..." type="note"/></outline><outline text="主启动类DeptConsumer80_App添加@EnableEurekaClient"><outline text="package com.atguigu.springcloud;&lt;br&gt;&lt;br&gt;import org.springframework.boot.SpringApplication;&lt;br&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;&lt;br&gt;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;&lt;br&gt;&lt;br&gt;&lt;br&gt;@SpringBootApplication&lt;br&gt;@EnableEurekaClient&lt;br&gt;public class DeptConsumer80_App..." type="note"/></outline><outline text="修改DeptController_Consumer客户端访问类"><outline text="package com.atguigu.springcloud.controller;&lt;br&gt; &lt;br&gt;import java.util.List;&lt;br&gt; &lt;br&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br&gt;import org.springframework.web.bind.annotation.PathVariable;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br&gt;import org.springframework.web.bind.annotation.RestController;&lt;br&gt;import org.springframework.web.client.RestTemplate;&lt;br&gt; ..." type="note"/></outline><outline text="先启动3个eureka集群后，再启动microservicecloud-provider-dept-8001并注册进eureka"><outline text="" type="note"/></outline><outline text="启动microservicecloud-consumer-dept-80"/><outline text="测试"><outline text="http://localhost/consumer/dept/get/1"/><outline text="http://localhost/consumer/dept/list"/><outline text="http://localhost/consumer/dept/add?dname=大数据部"/></outline><outline text="小总结"><outline text="Ribbon和Eureka整合后Consumer可以直接调用服务而不用再关心地址和端口号"><outline text="" type="note"/></outline></outline></outline><outline text="Ribbon负载均衡"><outline text="架构说明"><outline text="Ribbon在工作时分成两步&lt;br&gt;第一步先选择 EurekaServer ,它优先选择在同一个区域内负载较少的server.&lt;br&gt;第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。&lt;br&gt;其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。" type="note"/></outline><outline text="参考microservicecloud-provider-dept-8001，新建两份，分别命名为8002，8003"/><outline text="新建8002/8003数据库，各自微服务分别连各自的数据库"><outline text="8002SQL脚本"><outline text="DROP DATABASE IF EXISTS cloudDB02;&lt;br&gt; &lt;br&gt;CREATE DATABASE cloudDB02 CHARACTER SET UTF8;&lt;br&gt;&lt;br&gt;USE cloudDB02;&lt;br&gt;&lt;br&gt;CREATE TABLE dept&lt;br&gt;(&lt;br&gt;  deptno BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,&lt;br&gt;  dname VARCHAR(60),..." type="note"/></outline><outline text="8003SQL脚本"><outline text="DROP DATABASE IF EXISTS cloudDB03;&lt;br&gt;&lt;br&gt;CREATE DATABASE cloudDB03 CHARACTER SET UTF8;&lt;br&gt;&lt;br&gt;USE cloudDB03;&lt;br&gt;&lt;br&gt;&lt;br&gt;CREATE TABLE dept&lt;br&gt;(&lt;br&gt;    deptno BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,..." type="note"/></outline></outline><outline text="修改8002/8003各自YML"><outline text="8002YML"><outline text="server:&lt;br&gt;  port: 8002&lt;br&gt;  &lt;br&gt;mybatis:&lt;br&gt;  config-location: classpath:mybatis/mybatis.cfg.xml  #mybatis所在路径&lt;br&gt;  type-aliases-package: com.atguigu.springcloud.entities #entity别名类&lt;br&gt;  mapper-locations:&lt;br&gt;  - classpath:mybatis/mapper/**/*.xml #mapper映射文件&lt;br&gt;    &lt;br&gt;spring:..." type="note"/></outline><outline text="8003YML"><outline text="server:&lt;br&gt;  port: 8003&lt;br&gt;  &lt;br&gt;mybatis:&lt;br&gt;  config-location: classpath:mybatis/mybatis.cfg.xml  #mybatis所在路径&lt;br&gt;  type-aliases-package: com.atguigu.springcloud.entities #entity别名类&lt;br&gt;  mapper-locations:&lt;br&gt;  - classpath:mybatis/mapper/**/*.xml #mapper映射文件&lt;br&gt;    &lt;br&gt;spring:..." type="note"/></outline><outline text="备注"><outline text="端口"/><outline text="数据库链接"><outline text=""/></outline><outline text="对外暴露的统一的服务实例名"><outline text=""/></outline></outline></outline><outline text="启动3个eureka集群配置区"/><outline text="启动3个Dept微服务启动并各自测试通过"><outline text="http://localhost:8001/dept/list"/><outline text="http://localhost:8002/dept/list"/><outline text="http://localhost:8003/dept/list"/></outline><outline text="启动microservicecloud-consumer-dept-80"/><outline text="客户端通过Ribbo完成负载均衡并访问上一步的Dept微服务"><outline text="http://localhost/consumer/dept/list"/><outline text="注意观察看到返回的数据库名字，各不相同，负载均衡实现"/></outline><outline text="总结：Ribbon其实就是一个软负载均衡的客户端组件，&#10;他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。"/></outline></outline><outline text="Feign负载均衡"><outline text="概述"><outline text="官网解释：&lt;br&gt;http://projects.spring.io/spring-cloud/spring-cloud.html#spring-cloud-feign&lt;br&gt; &lt;br&gt; Feign是一个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单, 它的使用方法是定义一个接口，然后在上面添加注解，同时也支持JAX-RS标准的注解。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡。&lt;br&gt; ；&lt;br&gt; &lt;br&gt; Feign是一个声明式的Web服务客户端，使得编写Web服务客户端变得非常容易，..." type="note"/><outline text=""/></outline><outline text="Feign使用步骤"><outline text="参考microservicecloud-consumer-dept-80"/><outline text="新建microservicecloud-consumer-dept-feign"><outline text="修改主启动类名字"><outline text="DeptConsumer80_Feign_App"/></outline></outline><outline text="microservicecloud-consumer-dept-feign工程pom.xml修改，主要添加对feign的支持"><outline text="   &lt;&lt;dependency&gt;&lt;br&gt;       &lt;&lt;groupId&gt;org.springframework.cloud&lt;&lt;/groupId&gt;&lt;br&gt;       &lt;&lt;artifactId&gt;spring-cloud-starter-feign&lt;&lt;/artifactId&gt;&lt;br&gt;   &lt;&lt;/dependency&gt;" type="note"/></outline><outline text="修改microservicecloud-api工程"><outline text="POM"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;    &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;parent&gt;&lt;&lt;!-- 子类里面显示声明才能有明确的继承表现，无意外就是父类的默认版本否则自己定义 --&gt;&lt;br&gt;        &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;        &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline><outline text="新建DeptClientService接口并新增注解@FeignClient"><outline text="package com.atguigu.springcloud.service;&lt;br&gt;&lt;br&gt;import java.util.List;&lt;br&gt;&lt;br&gt;import org.springframework.cloud.netflix.feign.FeignClient;&lt;br&gt;import org.springframework.web.bind.annotation.PathVariable;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMethod;&lt;br&gt;&lt;br&gt;import com.atguigu.springcloud.entities.Dept;..." type="note"/><outline text="@FeignClient"/></outline><outline text="mvn clean"/><outline text="mvn install"/></outline><outline text="microservicecloud-consumer-dept-feign工程修改Controller，添加上一步新建的DeptClientService接口"><outline text="package com.atguigu.springcloud.controller;&lt;br&gt;&lt;br&gt;import java.util.List;&lt;br&gt;&lt;br&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br&gt;import org.springframework.web.bind.annotation.PathVariable;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br&gt;import org.springframework.web.bind.annotation.RestController;&lt;br&gt;&lt;br&gt;import com.atguigu.springcloud.entities.Dept;..." type="note"/></outline><outline text="microservicecloud-consumer-dept-feign工程修改主启动类"><outline text="package com.atguigu.springcloud;&lt;br&gt; &lt;br&gt;import org.springframework.boot.SpringApplication;&lt;br&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;&lt;br&gt;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;&lt;br&gt;import org.springframework.cloud.netflix.feign.EnableFeignClients;&lt;br&gt; &lt;br&gt; &lt;br&gt;@SpringBootApplication&lt;br&gt;@EnableEurekaClient..." type="note"/><outline text="@EnableFeignClients"/></outline><outline text="测试"><outline text="启动3个eureka集群"/><outline text="启动3个部门微服务8001/8002/8003"/><outline text="启动Feign自己启动"/><outline text="http://localhost/consumer/dept/list"/><outline text="Feign自带负载均衡配置项"/></outline><outline text="小总结"><outline text="   Feign通过接口的方法调用Rest服务（之前是Ribbon+RestTemplate），&lt;br&gt;该请求发送给Eureka服务器（http://MICROSERVICECLOUD-DEPT/dept/list）,&lt;br&gt;通过Feign直接找到服务接口，由于在进行服务调用的时候融合了Ribbon技术，所以也支持负载均衡作用。" type="note"/></outline></outline></outline><outline text="Hystrix断路器"><outline text="概述"><outline text="分布式系统面临的问题"><outline text="分布式系统面临的问题&lt;br&gt;复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。&lt;br&gt;&lt;br&gt; &lt;br&gt;服务雪崩&lt;br&gt;多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”.&lt;br&gt; &lt;br&gt;对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。" type="note"/></outline><outline text="是什么"><outline text="Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。&lt;br&gt; &lt;br&gt;“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。" type="note"/><outline text=""/></outline><outline text="能干嘛"><outline text="服务降级"/><outline text="服务熔断"/><outline text="服务限流"/><outline text="接近实时的监控"/><outline text="。。。。。。"/></outline><outline text="官网资料"><outline text="https://github.com/Netflix/Hystrix/wiki/How-To-Use"/></outline></outline><outline text="服务熔断"><outline text="是什么"><outline text="服务熔断&lt;br&gt;熔断机制是应对雪崩效应的一种微服务链路保护机制。&lt;br&gt;当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回&quot;错误&quot;的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是@HystrixCommand。" type="note"/></outline><outline text="参考microservicecloud-provider-dept-8001"/><outline text="新建microservicecloud-provider-dept-hystrix-8001"/><outline text="POM"><outline text="修改内容"><outline text="   &lt;&lt;!--  hystrix --&gt;&lt;br&gt;   &lt;&lt;dependency&gt;&lt;br&gt;     &lt;&lt;groupId&gt;org.springframework.cloud&lt;&lt;/groupId&gt;&lt;br&gt;     &lt;&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;&lt;/artifactId&gt;&lt;br&gt;   &lt;&lt;/dependency&gt;" type="note"/></outline><outline text="全部内容"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;  &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt; &lt;br&gt;  &lt;&lt;parent&gt;&lt;br&gt;   &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;   &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;   &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline></outline><outline text="YML"><outline text="server:&lt;br&gt;  port: 8001&lt;br&gt;  &lt;br&gt;mybatis:&lt;br&gt;  config-location: classpath:mybatis/mybatis.cfg.xml  #mybatis所在路径&lt;br&gt;  type-aliases-package: com.atguigu.springcloud.entities #entity别名类&lt;br&gt;  mapper-locations:&lt;br&gt;  - classpath:mybatis/mapper/**/*.xml #mapper映射文件&lt;br&gt;    &lt;br&gt;spring:..." type="note"/></outline><outline text="修改DeptController"><outline text="@HystrixCommand报异常后如何处理"><outline text="" type="note"/><outline text="一旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法"/></outline><outline text="代码内容"><outline text="package com.atguigu.springcloud.controller;&lt;br&gt;&lt;br&gt;&lt;br&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br&gt;import org.springframework.web.bind.annotation.PathVariable;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMethod;&lt;br&gt;import org.springframework.web.bind.annotation.RestController;&lt;br&gt;&lt;br&gt;import com.atguigu.springcloud.entities.Dept;..." type="note"/></outline></outline><outline text="修改主启动类DeptProvider8001_Hystrix_App并添加新注解@EnableCircuitBreaker"><outline text="package com.atguigu.springcloud;&lt;br&gt; &lt;br&gt;import org.springframework.boot.SpringApplication;&lt;br&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;&lt;br&gt;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;&lt;br&gt;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;&lt;br&gt;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;&lt;br&gt; &lt;br&gt;@SpringBootApplication&lt;br&gt;@EnableEurekaClient //本服务启动后会自动注册进eureka服务中..." type="note"/></outline><outline text="测试"><outline text="3个eureka先启动"/><outline text="主启动类DeptProvider8001_Hystrix_App"><outline text="" type="note"/></outline><outline text="Consumer启动microservicecloud-consumer-dept-80"/><outline text="http://localhost/consumer/dept/get/112"><outline text="    如果对应的ID：112，数据库里面没有这个记录，我们报错后统一返回。" type="note"/></outline></outline></outline><outline text="服务降级"><outline text="是什么"><outline text="整体资源快不够了，忍痛将某些服务先关掉，待渡过难关，再开启回来。" type="note"/></outline><outline text="服务降级处理是在客户端实现完成的，与服务端没有关系"/><outline text="修改microservicecloud-api工程，&#10;根据已经有的DeptClientService接口新建一个实现了&#10;FallbackFactory接口的类DeptClientServiceFallbackFactory"><outline text="package com.atguigu.springcloud.service;&lt;br&gt; &lt;br&gt;import java.util.List;&lt;br&gt; &lt;br&gt;import org.springframework.stereotype.Component;&lt;br&gt; &lt;br&gt;import com.atguigu.springcloud.entities.Dept;&lt;br&gt; &lt;br&gt;import feign.hystrix.FallbackFactory;&lt;br&gt; ..." type="note"/><outline text="千万不要忘记在类上面新增@Component注解，大坑！！！"/></outline><outline text="修改microservicecloud-api工程，DeptClientService接口在注解@FeignClient中添加fallbackFactory属性值"><outline text="package com.atguigu.springcloud.service;&lt;br&gt; &lt;br&gt;import java.util.List;&lt;br&gt; &lt;br&gt;import org.springframework.cloud.netflix.feign.FeignClient;&lt;br&gt;import org.springframework.web.bind.annotation.PathVariable;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br&gt;import org.springframework.web.bind.annotation.RequestMethod;&lt;br&gt; &lt;br&gt;import com.atguigu.springcloud.entities.Dept;..." type="note"/></outline><outline text="microservicecloud-api工程"><outline text="mvn clean install"/></outline><outline text="microservicecloud-consumer-dept-feign工程修改YML"><outline text="YML"><outline text="server:&lt;br&gt;  port: 80&lt;br&gt; &lt;br&gt;feign: &lt;br&gt;  hystrix: &lt;br&gt;    enabled: true&lt;br&gt; &lt;br&gt;eureka:&lt;br&gt;  client:&lt;br&gt;    register-with-eureka: false..." type="note"/></outline></outline><outline text="测试"><outline text="3个eureka先启动"/><outline text="微服务microservicecloud-provider-dept-8001启动"/><outline text="microservicecloud-consumer-dept-feign启动"/><outline text="正常访问测试"><outline text="http://localhost/consumer/dept/get/1"/></outline><outline text="故意关闭微服务microservicecloud-provider-dept-8001"/><outline text="客户端自己调用提示"><outline text="http://localhost/consumer/dept/get/1"/><outline text=""/><outline text="此时服务端provider已经down了，但是我们做了服务降级处理，让客户端在服务端不可用时也会获得提示信息而不会挂起耗死服务器"/></outline></outline></outline><outline text="服务监控hystrixDashboard"><outline text="概述"><outline text="除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard），Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。" type="note"/></outline><outline text="Case步骤"><outline text="新建工程microservicecloud-consumer-hystrix-dashboard"/><outline text="POM"><outline text="修改内容"><outline text="        &lt;&lt;!-- hystrix和 hystrix-dashboard相关--&gt;&lt;br&gt;        &lt;&lt;dependency&gt;&lt;br&gt;            &lt;&lt;groupId&gt;org.springframework.cloud&lt;&lt;/groupId&gt;&lt;br&gt;            &lt;&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;/dependency&gt;&lt;br&gt;        &lt;&lt;dependency&gt;&lt;br&gt;            &lt;&lt;groupId&gt;org.springframework.cloud&lt;&lt;/groupId&gt;&lt;br&gt;            &lt;&lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;/dependency&gt;" type="note"/></outline><outline text="全部内容"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;  &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;  &lt;br&gt;  &lt;&lt;parent&gt;&lt;br&gt;   &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;   &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;   &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline></outline><outline text="YML"><outline text="server:&lt;br&gt;  port: 9001" type="note"/></outline><outline text="主启动类改名+新注解@EnableHystrixDashboard"><outline text="package com.atguigu.springcloud;&lt;br&gt; &lt;br&gt;import org.springframework.boot.SpringApplication;&lt;br&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;&lt;br&gt;import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;&lt;br&gt; &lt;br&gt;@SpringBootApplication&lt;br&gt;@EnableHystrixDashboard&lt;br&gt;public class DeptConsumer_DashBoard_App..." type="note"/></outline><outline text="所有Provider微服务提供类(8001/8002/8003)都需要监控依赖配置"><outline text="        &lt;&lt;!-- actuator监控信息完善 --&gt;&lt;br&gt;        &lt;&lt;dependency&gt;&lt;br&gt;            &lt;&lt;groupId&gt;org.springframework.boot&lt;&lt;/groupId&gt;&lt;br&gt;            &lt;&lt;artifactId&gt;spring-boot-starter-actuator&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;/dependency&gt;" type="note"/></outline><outline text="启动microservicecloud-consumer-hystrix-dashboard该微服务监控消费端"><outline text="http://localhost:9001/hystrix"><outline text="" type="note"/></outline></outline><outline text="启动3个eureka集群"/><outline text="启动microservicecloud-provider-dept-hystrix-8001"><outline text="http://localhost:8001/dept/get/1"/><outline text="http://localhost:8001/hystrix.stream"><outline text="" type="note"/></outline></outline><outline text="启动的相关微服务工程"><outline text="" type="note"/></outline><outline text="监控测试"><outline text="多次刷新http://localhost:8001/dept/get/1"/><outline text="观察监控窗口"><outline text="填写监控地址"><outline text="1：Delay：该参数用来控制服务器上轮询监控信息的延迟时间，默认为2000毫秒，可以通过配置该属性来降低客户端的网络和CPU消耗。&lt;br&gt; &lt;br&gt;2：Title：该参数对应了头部标题Hystrix Stream之后的内容，默认会使用具体监控实例的URL，可以通过配置该信息来展示更合适的标题。" type="note"/></outline><outline text="监控结果"><outline text=" 如何看上图" type="note"/></outline><outline text="如何看？"><outline text="7色"/><outline text="1圈"><outline text="实心圆：共有两种含义。它通过颜色的变化代表了实例的健康程度，它的健康度从绿色&lt;&lt;黄色&lt;&lt;橙色&lt;&lt;红色递减。&lt;br&gt;该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量的实例中快速的发现故障实例和高压力实例。" type="note"/></outline><outline text="1线"><outline text="曲线：用来记录2分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势。" type="note"/></outline><outline text="整图说明"><outline text="" type="note"/></outline></outline><outline text="搞懂一个才能看懂复杂的"><outline text="" type="note"/></outline></outline></outline></outline></outline></outline><outline text="zuul路由网关"><outline text="概述"><outline text="是什么"><outline text="Zuul包含了对请求的路由和过滤两个最主要的功能：&lt;br&gt;其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础.&lt;br&gt;&lt;br&gt;Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他微服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。&lt;br&gt; &lt;br&gt;    注意：Zuul服务最终还是会注册进Eureka&lt;br&gt; &lt;br&gt;提供=代理+路由+过滤三大功能" type="note"/></outline><outline text="能干嘛"><outline text="路由"/><outline text="过滤"/></outline><outline text="官网资料"><outline text="https://github.com/Netflix/zuul/wiki/Getting-Started"/></outline></outline><outline text="路由基本配置"><outline text="新建Module模块microservicecloud-zuul-gateway-9527"/><outline text="POM"><outline text="修改内容"><outline text="       &lt;&lt;dependency&gt;&lt;br&gt;     &lt;&lt;groupId&gt;org.springframework.cloud&lt;&lt;/groupId&gt;&lt;br&gt;     &lt;&lt;artifactId&gt;spring-cloud-starter-eureka&lt;&lt;/artifactId&gt;&lt;br&gt;   &lt;&lt;/dependency&gt;&lt;br&gt;   &lt;&lt;dependency&gt;&lt;br&gt;     &lt;&lt;groupId&gt;org.springframework.cloud&lt;&lt;/groupId&gt;&lt;br&gt;     &lt;&lt;artifactId&gt;spring-cloud-starter-zuul&lt;&lt;/artifactId&gt;&lt;br&gt;   &lt;&lt;/dependency&gt;" type="note"/></outline><outline text="全部内容"><outline text="&lt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;br&gt;    &lt;&lt;modelVersion&gt;4.0.0&lt;&lt;/modelVersion&gt;&lt;br&gt;&lt;br&gt;    &lt;&lt;parent&gt;&lt;br&gt;        &lt;&lt;groupId&gt;com.atguigu.springcloud&lt;&lt;/groupId&gt;&lt;br&gt;        &lt;&lt;artifactId&gt;microservicecloud&lt;&lt;/artifactId&gt;&lt;br&gt;        &lt;&lt;version&gt;0.0.1-SNAPSHOT&lt;&lt;/version&gt;..." type="note"/></outline></outline><outline text="YML"><outline text="server: &lt;br&gt;  port: 9527&lt;br&gt; &lt;br&gt;spring: &lt;br&gt;  application:&lt;br&gt;    name: microservicecloud-zuul-gateway&lt;br&gt; &lt;br&gt;eureka: &lt;br&gt;  client: &lt;br&gt;    service-url: ..." type="note"/></outline><outline text="hosts修改"><outline text="127.0.0.1  myzuul.com"/></outline><outline text="主启动类"><outline text="package com.atguigu.springcloud;&lt;br&gt;&lt;br&gt;import org.springframework.boot.SpringApplication;&lt;br&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;&lt;br&gt;import org.springframework.cloud.netflix.zuul.EnableZuulProxy;&lt;br&gt;&lt;br&gt;@SpringBootApplication&lt;br&gt;@EnableZuulProxy&lt;br&gt;public class Zuul_9527_StartSpringCloudApp&lt;br&gt;{..." type="note"/><outline text="@EnableZuulProxy"/></outline><outline text="启动"><outline text="" type="note"/><outline text="三个eureka集群"/><outline text="一个服务提供类microservicecloud-provider-dept-8001"/><outline text="一个路由"/></outline><outline text="测试"><outline text="不用路由"><outline text="http://localhost:8001/dept/get/2"/></outline><outline text="启用路由"><outline text="http://myzuul.com:9527/microservicecloud-dept/dept/get/2"/></outline></outline></outline><outline text="路由访问映射规则"><outline text="工程microservicecloud-zuul-gateway-9527"/><outline text="代理名称"><outline text="YML"><outline text="before&lt;br&gt;http://myzuul.com:9527/microservicecloud-dept/dept/get/2&lt;br&gt; &lt;br&gt; &lt;br&gt;zuul: &lt;br&gt;  routes: &lt;br&gt;    mydept.serviceId: microservicecloud-dept&lt;br&gt;    mydept.path: /mydept/**&lt;br&gt; &lt;br&gt;after..." type="note"/></outline><outline text="此时问题"><outline text="路由访问OK"><outline text="http://myzuul.com:9527/mydept/dept/get/1"/></outline><outline text="原路径访问OK"><outline text="http://myzuul.com:9527/microservicecloud-dept/dept/get/2"/></outline></outline></outline><outline text="原真实服务名忽略"><outline text="YML"><outline text="zuul: &lt;br&gt;  ignored-services: microservicecloud-dept &lt;br&gt;  routes: &lt;br&gt;    mydept.serviceId: microservicecloud-dept&lt;br&gt;    mydept.path: /mydept/**" type="note"/></outline><outline text="单个具体，多个可以用&quot;*&quot;"><outline text="zuul: &lt;br&gt;  ignored-services: &quot;*&quot;&lt;br&gt;  routes: &lt;br&gt;    mydept.serviceId: microservicecloud-dept&lt;br&gt;    mydept.path: /mydept/**" type="note"/></outline></outline><outline text="设置统一公共前缀"><outline text="YML"><outline text="zuul: &lt;br&gt;  prefix: /atguigu&lt;br&gt;  ignored-services: &quot;*&quot;&lt;br&gt;  routes: &lt;br&gt;    mydept.serviceId: microservicecloud-dept&lt;br&gt;    mydept.path: /mydept/**" type="note"/></outline><outline text="http://myzuul.com:9527/atguigu/mydept/dept/get/1"/></outline><outline text="最后YML"><outline text="server: &lt;br&gt;  port: 9527&lt;br&gt; &lt;br&gt;spring: &lt;br&gt;  application:&lt;br&gt;    name: microservicecloud-zuul-gateway&lt;br&gt; &lt;br&gt;zuul: &lt;br&gt;  prefix: /atguigu&lt;br&gt;  ignored-services: &quot;*&quot;..." type="note"/></outline></outline></outline></outline></body></opml>